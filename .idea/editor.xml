<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="BackendCodeEditorSettings">
    <option name="/Default/Housekeeping/GlobalSettingsUpgraded/IsUpgraded/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/EditorConfig/EnableClangFormatSupport/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/ALIGN_MULTILINE_BINARY_EXPRESSIONS_CHAIN/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/ALIGN_MULTILINE_CALLS_CHAIN/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/ALIGN_MULTILINE_EXPRESSION/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/ALIGN_MULTILINE_FOR_STMT/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/ALIGN_MULTIPLE_DECLARATION/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/ALIGN_TERNARY/@EntryValue" value="ALIGN_ALL" type="string" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/BLANK_LINES_AROUND_CLASS_DEFINITION/@EntryValue" value="1" type="int" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/KEEP_BLANK_LINES_IN_DECLARATIONS/@EntryValue" value="2" type="int" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/KEEP_BLANK_LINES_IN_CODE/@EntryValue" value="2" type="int" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/KEEP_USER_LINEBREAKS/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/INDENT_CASE_FROM_SWITCH/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/INDENT_COMMENT/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/INT_ALIGN_EQ/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SIMPLE_BLOCK_STYLE/@EntryValue" value="DO_NOT_CHANGE" type="string" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_AFTER_COMMA_IN_TEMPLATE_ARGS/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_AFTER_COMMA_IN_TEMPLATE_PARAMS/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_AFTER_FOR_SEMICOLON/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_BEFORE_FOR_SEMICOLON/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_AFTER_UNARY_OPERATOR/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_WITHIN_ARRAY_ACCESS_BRACKETS/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_WITHIN_CAST_EXPRESSION_PARENTHESES/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_WITHIN_EMPTY_INITIALIZER_BRACES/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_WITHIN_EMPTY_METHOD_PARENTHESES/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_WITHIN_INITIALIZER_BRACES/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPECIAL_ELSE_IF_TREATMENT/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_AFTER_CAST_EXPRESSION_PARENTHESES/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/WRAP_AFTER_BINARY_OPSIGN/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/WRAP_BEFORE_TERNARY_OPSIGNS/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/TYPE_DECLARATION_BRACES/@EntryValue" value="END_OF_LINE" type="string" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/OTHER_BRACES/@EntryValue" value="END_OF_LINE" type="string" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/CASE_BLOCK_BRACES/@EntryValue" value="END_OF_LINE" type="string" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/BLANK_LINES_AROUND_FUNCTION_DECLARATION/@EntryValue" value="1" type="int" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/BLANK_LINES_AROUND_FUNCTION_DEFINITION/@EntryValue" value="1" type="int" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/PLACE_WHILE_ON_NEW_LINE/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/PLACE_ELSE_ON_NEW_LINE/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/PLACE_CATCH_ON_NEW_LINE/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/NAMESPACE_INDENTATION/@EntryValue" value="All" type="string" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/ALIGN_MULTILINE_ARGUMENT/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/ALIGN_MULTILINE_EXTENDS_LIST/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/ALIGN_MULTILINE_PARAMETER/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/ALIGN_MULTILINE_TYPE_ARGUMENT/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/ALIGN_MULTILINE_TYPE_PARAMETER/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/BLANK_LINES_AROUND_DECLARATIONS/@EntryValue" value="0" type="int" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/INDENT_ACCESS_SPECIFIERS_FROM_CLASS/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/INDENT_CLASS_MEMBERS_FROM_ACCESS_SPECIFIERS/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/LINE_BREAK_AFTER_COLON_IN_MEMBER_INITIALIZER_LISTS/@EntryValue" value="ON_SINGLE_LINE" type="string" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/MEMBER_INITIALIZER_LIST_STYLE/@EntryValue" value="DO_NOT_CHANGE" type="string" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/PLACE_NAMESPACE_DEFINITIONS_ON_SAME_LINE/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_AFTER_COLON_IN_BITFIELD_DECLARATOR/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_BEFORE_COLON_IN_BITFIELD_DECLARATOR/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_AFTER_EXTENDS_COLON/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_BEFORE_EXTENDS_COLON/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_AFTER_FOR_COLON/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_BEFORE_FOR_COLON/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_AFTER_PTR_IN_DATA_MEMBER/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_AFTER_PTR_IN_DATA_MEMBERS/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_AFTER_PTR_IN_METHOD/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_AFTER_PTR_IN_NESTED_DECLARATOR/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_AFTER_REF_IN_DATA_MEMBER/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_AFTER_REF_IN_DATA_MEMBERS/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_AFTER_REF_IN_METHOD/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_BEFORE_PTR_IN_ABSTRACT_DECL/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_BEFORE_PTR_IN_DATA_MEMBER/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_BEFORE_PTR_IN_DATA_MEMBERS/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_BEFORE_PTR_IN_METHOD/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_BEFORE_REF_IN_ABSTRACT_DECL/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_BEFORE_REF_IN_DATA_MEMBER/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_BEFORE_REF_IN_DATA_MEMBERS/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_BEFORE_REF_IN_METHOD/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_BEFORE_TEMPLATE_ARGS/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_BEFORE_TEMPLATE_PARAMS/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_BETWEEN_CLOSING_ANGLE_BRACKETS_IN_TEMPLATE_ARGS/@EntryValue" value="true" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_WITHIN_EMPTY_TEMPLATE_PARAMS/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_WITHIN_TEMPLATE_ARGS/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_WITHIN_TEMPLATE_PARAMS/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_WITHIN_DECLARATION_PARENTHESES/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/SPACE_WITHIN_EMPTY_BLOCKS/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/WRAP_BEFORE_INVOCATION_LPAR/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/WRAP_AFTER_INVOCATION_LPAR/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/WRAP_BEFORE_INVOCATION_RPAR/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/WRAP_BEFORE_DECLARATION_LPAR/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/WRAP_AFTER_DECLARATION_LPAR/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/WRAP_BEFORE_DECLARATION_RPAR/@EntryValue" value="false" type="bool" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/WRAP_ARGUMENTS_STYLE/@EntryValue" value="WRAP_IF_LONG" type="string" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/WRAP_PARAMETERS_STYLE/@EntryValue" value="WRAP_IF_LONG" type="string" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/BREAK_TEMPLATE_DECLARATION/@EntryValue" value="LINE_BREAK" type="string" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/NAMESPACE_DECLARATION_BRACES/@EntryValue" value="END_OF_LINE" type="string" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/FREE_BLOCK_BRACES/@EntryValue" value="END_OF_LINE" type="string" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/INVOCABLE_DECLARATION_BRACES/@EntryValue" value="END_OF_LINE" type="string" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/ANONYMOUS_METHOD_DECLARATION_BRACES/@EntryValue" value="END_OF_LINE" type="string" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/INITIALIZER_BRACES/@EntryValue" value="END_OF_LINE_NO_SPACE" type="string" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/INDENT_STYLE/@EntryValue" value="Space" type="string" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/INDENT_SIZE/@EntryValue" value="4" type="int" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/CONTINUOUS_LINE_INDENT/@EntryValue" value="Double" type="string" />
    <option name="/Default/CodeStyle/CodeFormatting/CppFormatting/TAB_WIDTH/@EntryValue" value="4" type="int" />
    <option name="/Default/CodeStyle/CodeFormatting/CppClangFormat/EnableClangFormatSupport/@EntryValue" value="false" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=46D5CBDFE946EF42BB29256B35E06289/Reformat/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=46D5CBDFE946EF42BB29256B35E06289/ShortenQualifiedReferences/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=46D5CBDFE946EF42BB29256B35E06289/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=46D5CBDFE946EF42BB29256B35E06289/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=46D5CBDFE946EF42BB29256B35E06289/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=21F8E21FF2C1484DA446367C272B2F7A/Reformat/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=21F8E21FF2C1484DA446367C272B2F7A/ShortenQualifiedReferences/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=21F8E21FF2C1484DA446367C272B2F7A/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=21F8E21FF2C1484DA446367C272B2F7A/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=21F8E21FF2C1484DA446367C272B2F7A/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C1E7B399C64BB44AA7422A7044A00787/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C1E7B399C64BB44AA7422A7044A00787/Reformat/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C1E7B399C64BB44AA7422A7044A00787/ShortenQualifiedReferences/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C1E7B399C64BB44AA7422A7044A00787/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C1E7B399C64BB44AA7422A7044A00787/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C1E7B399C64BB44AA7422A7044A00787/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C1E7B399C64BB44AA7422A7044A00787/Shortcut/@EntryValue" value="cppmain" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=C1E7B399C64BB44AA7422A7044A00787/Text/@EntryValue" value="/******************************Mohammed BENHAMMOUTE******************************/&#10;&#10;/*** begin includes ***/&#10;#include &lt;bits/stdc++.h&gt;&#10;&#10;using namespace std;&#10;&#10;typedef long long int ll;&#10;typedef pair&lt;int, int&gt; pi;&#10;typedef pair&lt;ll, ll&gt; pl;&#10;typedef vector&lt;int&gt; vi;&#10;typedef vector&lt;ll&gt; vl;&#10;typedef vector&lt;vi&gt; vvi;&#10;typedef vector&lt;vl&gt; vvl;&#10;typedef vector&lt;pi&gt; vpi;&#10;typedef vector&lt;pl&gt; vpl;&#10;typedef vector&lt;vpi&gt; vvpi;&#10;typedef vector&lt;vpl&gt; vvpl;&#10;typedef set&lt;int&gt; si;&#10;typedef multiset&lt;int&gt; msi;&#10;typedef set&lt;ll&gt; sl;&#10;typedef multiset&lt;ll&gt; msl;&#10;typedef long double ld;&#10;template&lt;class T&gt; using func = function&lt;T&gt;;&#10;&#10;/*** begin #defines ***/&#10;#define clrcin cin.ignore(numeric_limits&lt;streamsize&gt;::max(),'\n');&#10;#define GOGOGO ios::sync_with_stdio(false); cin.tie(nullptr);&#10;#define BYEBYE return 0;&#10;&#10;#define all(cn) (cn).begin(), (cn).end()&#10;#define rep(i, n) for (int i = 0; i &lt; n; ++i)&#10;#define csz(c) ((int)c.size())&#10;#define mp make_pair&#10;#define pb push_back&#10;#define eb emplace_back&#10;#define fi first&#10;#define se second&#10;&#10;#define popcnt __builtin_popcount&#10;#define popcntll __builtin_popcount_ll&#10;&#10;#define what(x) cout &lt;&lt; #x &lt;&lt; &quot; = &quot; &lt;&lt; x &lt;&lt; '\n'&#10;#define cinarr(v) for (auto &amp;x : v) cin &gt;&gt; x&#10;#define coutarr(v) for (const auto &amp;x : v) cout &lt;&lt; x &lt;&lt; ' '; cout &lt;&lt; '\n'&#10;#define coutarrp(v) for (const auto &amp;x : v) cout &lt;&lt; '(' &lt;&lt; x.fi &lt;&lt; ',' &lt;&lt; x.se &lt;&lt; ')'; cout &lt;&lt; '\n'&#10;#define coutarrP(v) for (const auto &amp;x : v) cout &lt;&lt; '(' &lt;&lt; x.fi &lt;&lt; ',' &lt;&lt; x.se &lt;&lt; ')'; cout &lt;&lt; '\n'&#10;#define coutarrnl(v) for (const auto &amp;x : v) cout &lt;&lt; x &lt;&lt; '\n'&#10;/*** end #defines ***/&#10;&#10; // utililty functions&#10;template&lt;class T&gt; T gcd(T a, T b) { return b == 0 ? a : gcd(b, a % b); }&#10;template&lt;class T&gt; T lcm(T a, T b) { return a / gcd(a, b) * b; }&#10;template&lt;class T&gt; T mod(T a, T b) { return (a % b + b) % b; }&#10;// modmul is used to avoid overflow in multiplication&#10;template&lt;class T&gt; T modmul(T a, T b, T m) {&#10;    T r = a * b - m * ll(ld(a) * ld(b) / ld(m));&#10;    return r + m * (r &lt; 0) - m * (r &gt;= m);&#10;}&#10;template&lt;class T&gt; T modinv(T a, T m) {&#10;    T m0 = m, t, q;&#10;    T x0 = 0, x1 = 1;&#10;    if (m == 1) return 0;&#10;    while (a &gt; 1) {&#10;        q = a / m;&#10;        t = m, m = a % m, a = t;&#10;        t = x0, x0 = x1 - q * x0, x1 = t;&#10;    }&#10;    return mod(x1, m0);&#10;}&#10;&#10;// graph functions&#10;template&lt;class T&gt; void dfs(const vector&lt;vector&lt;T&gt;&gt; &amp;g, vector&lt;bool&gt; &amp;vis, int u) {&#10;    vis[u] = true;&#10;    for (const auto &amp;v : g[u]) {&#10;        if (!vis[v]) {&#10;            dfs(g, vis, v);&#10;        }&#10;    }&#10;}&#10;&#10;template&lt;class T&gt; void bfs(const vector&lt;vector&lt;T&gt;&gt; &amp;g, vector&lt;bool&gt; &amp;vis, int u) {&#10;    queue&lt;int&gt; q;&#10;    q.push(u);&#10;    vis[u] = true;&#10;    while (!q.empty()) {&#10;        u = q.front(); q.pop();&#10;        for (const auto &amp;v : g[u]) {&#10;            if (!vis[v]) {&#10;                vis[v] = true;&#10;                q.push(v);&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// binary couloring function&#10;bool is_bipartite(const vector&lt;vector&lt;int&gt;&gt; &amp;g, vector&lt;int&gt; &amp;color, int u, int c) {&#10;    color[u] = c;&#10;    for (const auto &amp;v : g[u]) {&#10;        if (color[v] == c) return false;&#10;        if (color[v] == -1 &amp;&amp; !is_bipartite(g, color, v, 1 - c)) return false;&#10;    }&#10;    return true;&#10;}&#10;&#10;// prime sieve&#10;vector&lt;int&gt; sieve(int n) {&#10;    vector&lt;int&gt; primes;&#10;    vector&lt;bool&gt; is_prime(n + 1, true);&#10;    is_prime[0] = is_prime[1] = false;&#10;    for (int i = 2; i &lt;= n; ++i) {&#10;        if (is_prime[i]) {&#10;            primes.push_back(i);&#10;            for (int j = i * 2; j &lt;= n; j += i) {&#10;                is_prime[j] = false;&#10;            }&#10;        }&#10;    }&#10;    return primes;&#10;}&#10;&#10;// prime factorization&#10;vector&lt;pair&lt;int, int&gt;&gt; prime_factorization(int n) {&#10;    vector&lt;pair&lt;int, int&gt;&gt; factors;&#10;    for (int i = 2; i * i &lt;= n; ++i) {&#10;        if (n % i == 0) {&#10;            int cnt = 0;&#10;            while (n % i == 0) {&#10;                n /= i;&#10;                ++cnt;&#10;            }&#10;            factors.emplace_back(i, cnt);&#10;        }&#10;    }&#10;    if (n &gt; 1) {&#10;        factors.emplace_back(n, 1);&#10;    }&#10;    return factors;&#10;}&#10;&#10;// fast exponentiation&#10;ll fastpow(ll a, ll b, ll m) {&#10;    ll res = 1;&#10;    while (b &gt; 0) {&#10;        if (b &amp; 1) {&#10;            res = res * a % m;&#10;        }&#10;        a = a * a % m;&#10;        b &gt;&gt;= 1;&#10;    }&#10;    return res;&#10;}&#10;&#10;// dp functions&#10;template&lt;class T&gt; T knapsack(const vector&lt;T&gt; &amp;w, const vector&lt;T&gt; &amp;v, T W) {&#10;    int n = csz(w);&#10;    vector&lt;vector&lt;T&gt;&gt; dp(n + 1, vector&lt;T&gt;(W + 1));&#10;    for (int i = 1; i &lt;= n; ++i) {&#10;        for (int j = 0; j &lt;= W; ++j) {&#10;            dp[i][j] = dp[i - 1][j];&#10;            if (j &gt;= w[i - 1]) {&#10;                dp[i][j] = max(dp[i][j], dp[i - 1][j - w[i - 1]] + v[i - 1]);&#10;            }&#10;        }&#10;    }&#10;    return dp[n][W];&#10;}&#10;&#10;template&lt;class T&gt; T lcs(const vector&lt;T&gt; &amp;a, const vector&lt;T&gt; &amp;b) {&#10;    int n = csz(a), m = csz(b);&#10;    vector&lt;vector&lt;T&gt;&gt; dp(n + 1, vector&lt;T&gt;(m + 1));&#10;    for (int i = 1; i &lt;= n; ++i) {&#10;        for (int j = 1; j &lt;= m; ++j) {&#10;            if (a[i - 1] == b[j - 1]) {&#10;                dp[i][j] = dp[i - 1][j - 1] + 1;&#10;            } else {&#10;                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);&#10;            }&#10;        }&#10;    }&#10;    return dp[n][m];&#10;}&#10;&#10;template&lt;class T&gt; T lis(const vector&lt;T&gt; &amp;a) {&#10;    int n = csz(a);&#10;    vector&lt;T&gt; dp;&#10;    for (const auto &amp;x : a) {&#10;        auto it = lower_bound(all(dp), x);&#10;        if (it == dp.end()) {&#10;            dp.pb(x);&#10;        } else {&#10;            *it = x;&#10;        }&#10;    }&#10;    return csz(dp);&#10;}&#10;&#10; // binary search lower bound upper bound for binary search on the answer&#10;template&lt;class T&gt; T lower_bound(const vector&lt;T&gt; &amp;a, T x) {&#10;    int l = -1, r = csz(a);&#10;    while (r - l &gt; 1) {&#10;        int m = (l + r) / 2;&#10;        if (a[m] &gt;= x) {&#10;            r = m;&#10;        } else {&#10;            l = m;&#10;        }&#10;    }&#10;    return r;&#10;}&#10;&#10;template&lt;class T&gt; T upper_bound(const vector&lt;T&gt; &amp;a, T x) {&#10;    int l = -1, r = csz(a);&#10;    while (r - l &gt; 1) {&#10;        int m = (l + r) / 2;&#10;        if (a[m] &gt; x) {&#10;            r = m;&#10;        } else {&#10;            l = m;&#10;        }&#10;    }&#10;    return r;&#10;}&#10;&#10;const int INFI = 1e9 + 5;&#10;const ll INFL = 1e18 + 5;&#10;const ld EPS = 1e-9;&#10;const ll MOD = 1e9 + 7;&#10;const ld PI = 3.14159265358979323846;&#10;mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());&#10;auto dist = uniform_int_distribution&lt;int&gt;(0, INFI);&#10;auto distll = uniform_int_distribution&lt;ll&gt;(0, INFL);&#10;int rnd() { return dist(rng); }&#10;ll rndl() { return distll(rng); }&#10;&#10;void solve() {&#10;    &#10;}&#10;&#10;int main() {&#10;    GOGOGO&#10;    int t;&#10;    cin &gt;&gt; t;&#10;    while (t--) {&#10;        solve();&#10;    }&#10;    BYEBYE&#10;};" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=BB32C1E9326A55489C5A4AC8DB460C00/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=BB32C1E9326A55489C5A4AC8DB460C00/Reformat/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=BB32C1E9326A55489C5A4AC8DB460C00/ShortenQualifiedReferences/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=BB32C1E9326A55489C5A4AC8DB460C00/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=BB32C1E9326A55489C5A4AC8DB460C00/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=BB32C1E9326A55489C5A4AC8DB460C00/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=BB32C1E9326A55489C5A4AC8DB460C00/Shortcut/@EntryValue" value="cppmain" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=BB32C1E9326A55489C5A4AC8DB460C00/Text/@EntryValue" value="/******************************Mohammed BENHAMMOUTE******************************/&#10;&#10;/*** begin includes ***/&#10;#include &lt;bits/stdc++.h&gt;&#10;&#10;using namespace std;&#10;&#10;typedef long long int ll;&#10;typedef pair&lt;int, int&gt; pi;&#10;typedef pair&lt;ll, ll&gt; pl;&#10;typedef vector&lt;int&gt; vi;&#10;typedef vector&lt;ll&gt; vl;&#10;typedef vector&lt;vi&gt; vvi;&#10;typedef vector&lt;vl&gt; vvl;&#10;typedef vector&lt;pi&gt; vpi;&#10;typedef vector&lt;pl&gt; vpl;&#10;typedef vector&lt;vpi&gt; vvpi;&#10;typedef vector&lt;vpl&gt; vvpl;&#10;typedef set&lt;int&gt; si;&#10;typedef multiset&lt;int&gt; msi;&#10;typedef set&lt;ll&gt; sl;&#10;typedef multiset&lt;ll&gt; msl;&#10;typedef long double ld;&#10;template&lt;class T&gt; using func = function&lt;T&gt;;&#10;&#10;/*** begin #defines ***/&#10;#define clrcin cin.ignore(numeric_limits&lt;streamsize&gt;::max(),'\n');&#10;#define GOGOGO ios::sync_with_stdio(false); cin.tie(nullptr);&#10;#define BYEBYE return 0;&#10;&#10;#define all(cn) (cn).begin(), (cn).end()&#10;#define rep(i, n) for (int i = 0; i &lt; n; ++i)&#10;#define csz(c) ((int)c.size())&#10;#define mp make_pair&#10;#define pb push_back&#10;#define eb emplace_back&#10;#define fi first&#10;#define se second&#10;&#10;#define popcnt __builtin_popcount&#10;#define popcntll __builtin_popcount_ll&#10;&#10;#define what(x) cout &lt;&lt; #x &lt;&lt; &quot; = &quot; &lt;&lt; x &lt;&lt; '\n'&#10;#define cinarr(v) for (auto &amp;x : v) cin &gt;&gt; x&#10;#define coutarr(v) for (const auto &amp;x : v) cout &lt;&lt; x &lt;&lt; ' '; cout &lt;&lt; '\n'&#10;#define coutarrp(v) for (const auto &amp;x : v) cout &lt;&lt; '(' &lt;&lt; x.fi &lt;&lt; ',' &lt;&lt; x.se &lt;&lt; ')'; cout &lt;&lt; '\n'&#10;#define coutarrP(v) for (const auto &amp;x : v) cout &lt;&lt; '(' &lt;&lt; x.fi &lt;&lt; ',' &lt;&lt; x.se &lt;&lt; ')'; cout &lt;&lt; '\n'&#10;#define coutarrnl(v) for (const auto &amp;x : v) cout &lt;&lt; x &lt;&lt; '\n'&#10;/*** end #defines ***/&#10;&#10; // utililty functions&#10;template&lt;class T&gt; T gcd(T a, T b) { return b == 0 ? a : gcd(b, a % b); }&#10;template&lt;class T&gt; T lcm(T a, T b) { return a / gcd(a, b) * b; }&#10;template&lt;class T&gt; T mod(T a, T b) { return (a % b + b) % b; }&#10;// modmul is used to avoid overflow in multiplication&#10;template&lt;class T&gt; T modmul(T a, T b, T m) {&#10;    T r = a * b - m * ll(ld(a) * ld(b) / ld(m));&#10;    return r + m * (r &lt; 0) - m * (r &gt;= m);&#10;}&#10;template&lt;class T&gt; T modinv(T a, T m) {&#10;    T m0 = m, t, q;&#10;    T x0 = 0, x1 = 1;&#10;    if (m == 1) return 0;&#10;    while (a &gt; 1) {&#10;        q = a / m;&#10;        t = m, m = a % m, a = t;&#10;        t = x0, x0 = x1 - q * x0, x1 = t;&#10;    }&#10;    return mod(x1, m0);&#10;}&#10;&#10;// graph functions&#10;template&lt;class T&gt; void dfs(const vector&lt;vector&lt;T&gt;&gt; &amp;g, vector&lt;bool&gt; &amp;vis, int u) {&#10;    vis[u] = true;&#10;    for (const auto &amp;v : g[u]) {&#10;        if (!vis[v]) {&#10;            dfs(g, vis, v);&#10;        }&#10;    }&#10;}&#10;&#10;template&lt;class T&gt; void bfs(const vector&lt;vector&lt;T&gt;&gt; &amp;g, vector&lt;bool&gt; &amp;vis, int u) {&#10;    queue&lt;int&gt; q;&#10;    q.push(u);&#10;    vis[u] = true;&#10;    while (!q.empty()) {&#10;        u = q.front(); q.pop();&#10;        for (const auto &amp;v : g[u]) {&#10;            if (!vis[v]) {&#10;                vis[v] = true;&#10;                q.push(v);&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// binary couloring function&#10;bool is_bipartite(const vector&lt;vector&lt;int&gt;&gt; &amp;g, vector&lt;int&gt; &amp;color, int u, int c) {&#10;    color[u] = c;&#10;    for (const auto &amp;v : g[u]) {&#10;        if (color[v] == c) return false;&#10;        if (color[v] == -1 &amp;&amp; !is_bipartite(g, color, v, 1 - c)) return false;&#10;    }&#10;    return true;&#10;}&#10;&#10;// prime sieve&#10;vector&lt;int&gt; sieve(int n) {&#10;    vector&lt;int&gt; primes;&#10;    vector&lt;bool&gt; is_prime(n + 1, true);&#10;    is_prime[0] = is_prime[1] = false;&#10;    for (int i = 2; i &lt;= n; ++i) {&#10;        if (is_prime[i]) {&#10;            primes.push_back(i);&#10;            for (int j = i * 2; j &lt;= n; j += i) {&#10;                is_prime[j] = false;&#10;            }&#10;        }&#10;    }&#10;    return primes;&#10;}&#10;&#10;// prime factorization&#10;vector&lt;pair&lt;int, int&gt;&gt; prime_factorization(int n) {&#10;    vector&lt;pair&lt;int, int&gt;&gt; factors;&#10;    for (int i = 2; i * i &lt;= n; ++i) {&#10;        if (n % i == 0) {&#10;            int cnt = 0;&#10;            while (n % i == 0) {&#10;                n /= i;&#10;                ++cnt;&#10;            }&#10;            factors.emplace_back(i, cnt);&#10;        }&#10;    }&#10;    if (n &gt; 1) {&#10;        factors.emplace_back(n, 1);&#10;    }&#10;    return factors;&#10;}&#10;&#10;// fast exponentiation&#10;ll fastpow(ll a, ll b, ll m) {&#10;    ll res = 1;&#10;    while (b &gt; 0) {&#10;        if (b &amp; 1) {&#10;            res = res * a % m;&#10;        }&#10;        a = a * a % m;&#10;        b &gt;&gt;= 1;&#10;    }&#10;    return res;&#10;}&#10;&#10;// dp functions&#10;template&lt;class T&gt; T knapsack(const vector&lt;T&gt; &amp;w, const vector&lt;T&gt; &amp;v, T W) {&#10;    int n = csz(w);&#10;    vector&lt;vector&lt;T&gt;&gt; dp(n + 1, vector&lt;T&gt;(W + 1));&#10;    for (int i = 1; i &lt;= n; ++i) {&#10;        for (int j = 0; j &lt;= W; ++j) {&#10;            dp[i][j] = dp[i - 1][j];&#10;            if (j &gt;= w[i - 1]) {&#10;                dp[i][j] = max(dp[i][j], dp[i - 1][j - w[i - 1]] + v[i - 1]);&#10;            }&#10;        }&#10;    }&#10;    return dp[n][W];&#10;}&#10;&#10;template&lt;class T&gt; T lcs(const vector&lt;T&gt; &amp;a, const vector&lt;T&gt; &amp;b) {&#10;    int n = csz(a), m = csz(b);&#10;    vector&lt;vector&lt;T&gt;&gt; dp(n + 1, vector&lt;T&gt;(m + 1));&#10;    for (int i = 1; i &lt;= n; ++i) {&#10;        for (int j = 1; j &lt;= m; ++j) {&#10;            if (a[i - 1] == b[j - 1]) {&#10;                dp[i][j] = dp[i - 1][j - 1] + 1;&#10;            } else {&#10;                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);&#10;            }&#10;        }&#10;    }&#10;    return dp[n][m];&#10;}&#10;&#10;template&lt;class T&gt; T lis(const vector&lt;T&gt; &amp;a) {&#10;    int n = csz(a);&#10;    vector&lt;T&gt; dp;&#10;    for (const auto &amp;x : a) {&#10;        auto it = lower_bound(all(dp), x);&#10;        if (it == dp.end()) {&#10;            dp.pb(x);&#10;        } else {&#10;            *it = x;&#10;        }&#10;    }&#10;    return csz(dp);&#10;}&#10;&#10; // binary search lower bound upper bound for binary search on the answer&#10;template&lt;class T&gt; T lower_bound(const vector&lt;T&gt; &amp;a, T x) {&#10;    int l = -1, r = csz(a);&#10;    while (r - l &gt; 1) {&#10;        int m = (l + r) / 2;&#10;        if (a[m] &gt;= x) {&#10;            r = m;&#10;        } else {&#10;            l = m;&#10;        }&#10;    }&#10;    return r;&#10;}&#10;&#10;template&lt;class T&gt; T upper_bound(const vector&lt;T&gt; &amp;a, T x) {&#10;    int l = -1, r = csz(a);&#10;    while (r - l &gt; 1) {&#10;        int m = (l + r) / 2;&#10;        if (a[m] &gt; x) {&#10;            r = m;&#10;        } else {&#10;            l = m;&#10;        }&#10;    }&#10;    return r;&#10;}&#10;&#10;const int INFI = 1e9 + 5;&#10;const ll INFL = 1e18 + 5;&#10;const ld EPS = 1e-9;&#10;const ll MOD = 1e9 + 7;&#10;const ld PI = 3.14159265358979323846;&#10;mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());&#10;auto dist = uniform_int_distribution&lt;int&gt;(0, INFI);&#10;auto distll = uniform_int_distribution&lt;ll&gt;(0, INFL);&#10;int rnd() { return dist(rng); }&#10;ll rndl() { return distll(rng); }&#10;&#10;void solve() {&#10;    &#10;}&#10;&#10;int main() {&#10;    GOGOGO&#10;    int t;&#10;    cin &gt;&gt; t;&#10;    while (t--) {&#10;        solve();&#10;    }&#10;    BYEBYE&#10;}" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=02DF8C1C0A239A4A9FB2F1DC99472D1B/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=02DF8C1C0A239A4A9FB2F1DC99472D1B/Reformat/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=02DF8C1C0A239A4A9FB2F1DC99472D1B/ShortenQualifiedReferences/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=02DF8C1C0A239A4A9FB2F1DC99472D1B/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=02DF8C1C0A239A4A9FB2F1DC99472D1B/Applicability/=Live/@EntryIndexRemoved" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=02DF8C1C0A239A4A9FB2F1DC99472D1B/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=02DF8C1C0A239A4A9FB2F1DC99472D1B/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=02DF8C1C0A239A4A9FB2F1DC99472D1B/Text/@EntryValue" value="//#pragma once&#10;&#10;/******************************Mohammed BENHAMMOUTE******************************/&#10;&#10;/*** begin includes ***/&#10;#include &lt;bits/stdc++.h&gt;&#10;&#10;using namespace std;&#10;&#10;typedef long long int ll;&#10;typedef pair&lt;int, int&gt; pi;&#10;typedef pair&lt;ll, ll&gt; pl;&#10;typedef vector&lt;int&gt; vi;&#10;typedef vector&lt;ll&gt; vl;&#10;typedef vector&lt;vi&gt; vvi;&#10;typedef vector&lt;vl&gt; vvl;&#10;typedef vector&lt;pi&gt; vpi;&#10;typedef vector&lt;pl&gt; vpl;&#10;typedef vector&lt;vpi&gt; vvpi;&#10;typedef vector&lt;vpl&gt; vvpl;&#10;typedef set&lt;int&gt; si;&#10;typedef multiset&lt;int&gt; msi;&#10;typedef set&lt;ll&gt; sl;&#10;typedef multiset&lt;ll&gt; msl;&#10;typedef long double ld;&#10;template&lt;class T&gt; using func = function&lt;T&gt;;&#10;&#10;/*** begin #defines ***/&#10;#define clrcin cin.ignore(numeric_limits&lt;streamsize&gt;::max(),'\n');&#10;#define GOGOGO ios::sync_with_stdio(false); cin.tie(nullptr);&#10;#define BYEBYE return 0;&#10;&#10;#define all(cn) (cn).begin(), (cn).end()&#10;#define rep(i, n) for (int i = 0; i &lt; n; ++i)&#10;#define csz(c) ((int)c.size())&#10;#define mp make_pair&#10;#define pb push_back&#10;#define eb emplace_back&#10;#define fi first&#10;#define se second&#10;&#10;#define popcnt __builtin_popcount&#10;#define popcntll __builtin_popcount_ll&#10;&#10;#define what(x) cout &lt;&lt; #x &lt;&lt; &quot; = &quot; &lt;&lt; x &lt;&lt; '\n'&#10;#define cinarr(v) for (auto &amp;x : v) cin &gt;&gt; x&#10;#define coutarr(v) for (const auto &amp;x : v) cout &lt;&lt; x &lt;&lt; ' '; cout &lt;&lt; '\n'&#10;#define coutarrp(v) for (const auto &amp;x : v) cout &lt;&lt; '(' &lt;&lt; x.fi &lt;&lt; ',' &lt;&lt; x.se &lt;&lt; ')'; cout &lt;&lt; '\n'&#10;#define coutarrP(v) for (const auto &amp;x : v) cout &lt;&lt; '(' &lt;&lt; x.fi &lt;&lt; ',' &lt;&lt; x.se &lt;&lt; ')'; cout &lt;&lt; '\n'&#10;#define coutarrnl(v) for (const auto &amp;x : v) cout &lt;&lt; x &lt;&lt; '\n'&#10;/*** end #defines ***/&#10;&#10; // utililty functions&#10;template&lt;class T&gt; T gcd(T a, T b) { return b == 0 ? a : gcd(b, a % b); }&#10;template&lt;class T&gt; T lcm(T a, T b) { return a / gcd(a, b) * b; }&#10;template&lt;class T&gt; T mod(T a, T b) { return (a % b + b) % b; }&#10;// modmul is used to avoid overflow in multiplication&#10;template&lt;class T&gt; T modmul(T a, T b, T m) {&#10;    T r = a * b - m * ll(ld(a) * ld(b) / ld(m));&#10;    return r + m * (r &lt; 0) - m * (r &gt;= m);&#10;}&#10;template&lt;class T&gt; T modinv(T a, T m) {&#10;    T m0 = m, t, q;&#10;    T x0 = 0, x1 = 1;&#10;    if (m == 1) return 0;&#10;    while (a &gt; 1) {&#10;        q = a / m;&#10;        t = m, m = a % m, a = t;&#10;        t = x0, x0 = x1 - q * x0, x1 = t;&#10;    }&#10;    return mod(x1, m0);&#10;}&#10;&#10;// graph functions&#10;template&lt;class T&gt; void dfs(const vector&lt;vector&lt;T&gt;&gt; &amp;g, vector&lt;bool&gt; &amp;vis, int u) {&#10;    vis[u] = true;&#10;    for (const auto &amp;v : g[u]) {&#10;        if (!vis[v]) {&#10;            dfs(g, vis, v);&#10;        }&#10;    }&#10;}&#10;&#10;template&lt;class T&gt; void bfs(const vector&lt;vector&lt;T&gt;&gt; &amp;g, vector&lt;bool&gt; &amp;vis, int u) {&#10;    queue&lt;int&gt; q;&#10;    q.push(u);&#10;    vis[u] = true;&#10;    while (!q.empty()) {&#10;        u = q.front(); q.pop();&#10;        for (const auto &amp;v : g[u]) {&#10;            if (!vis[v]) {&#10;                vis[v] = true;&#10;                q.push(v);&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// binary couloring function&#10;bool is_bipartite(const vector&lt;vector&lt;int&gt;&gt; &amp;g, vector&lt;int&gt; &amp;color, int u, int c) {&#10;    color[u] = c;&#10;    for (const auto &amp;v : g[u]) {&#10;        if (color[v] == c) return false;&#10;        if (color[v] == -1 &amp;&amp; !is_bipartite(g, color, v, 1 - c)) return false;&#10;    }&#10;    return true;&#10;}&#10;&#10;// prime sieve&#10;vector&lt;int&gt; sieve(int n) {&#10;    vector&lt;int&gt; primes;&#10;    vector&lt;bool&gt; is_prime(n + 1, true);&#10;    is_prime[0] = is_prime[1] = false;&#10;    for (int i = 2; i &lt;= n; ++i) {&#10;        if (is_prime[i]) {&#10;            primes.push_back(i);&#10;            for (int j = i * 2; j &lt;= n; j += i) {&#10;                is_prime[j] = false;&#10;            }&#10;        }&#10;    }&#10;    return primes;&#10;}&#10;&#10;// prime factorization&#10;vector&lt;pair&lt;int, int&gt;&gt; prime_factorization(int n) {&#10;    vector&lt;pair&lt;int, int&gt;&gt; factors;&#10;    for (int i = 2; i * i &lt;= n; ++i) {&#10;        if (n % i == 0) {&#10;            int cnt = 0;&#10;            while (n % i == 0) {&#10;                n /= i;&#10;                ++cnt;&#10;            }&#10;            factors.emplace_back(i, cnt);&#10;        }&#10;    }&#10;    if (n &gt; 1) {&#10;        factors.emplace_back(n, 1);&#10;    }&#10;    return factors;&#10;}&#10;&#10;// fast exponentiation&#10;ll fastpow(ll a, ll b, ll m) {&#10;    ll res = 1;&#10;    while (b &gt; 0) {&#10;        if (b &amp; 1) {&#10;            res = res * a % m;&#10;        }&#10;        a = a * a % m;&#10;        b &gt;&gt;= 1;&#10;    }&#10;    return res;&#10;}&#10;&#10;// dp functions&#10;template&lt;class T&gt; T knapsack(const vector&lt;T&gt; &amp;w, const vector&lt;T&gt; &amp;v, T W) {&#10;    int n = csz(w);&#10;    vector&lt;vector&lt;T&gt;&gt; dp(n + 1, vector&lt;T&gt;(W + 1));&#10;    for (int i = 1; i &lt;= n; ++i) {&#10;        for (int j = 0; j &lt;= W; ++j) {&#10;            dp[i][j] = dp[i - 1][j];&#10;            if (j &gt;= w[i - 1]) {&#10;                dp[i][j] = max(dp[i][j], dp[i - 1][j - w[i - 1]] + v[i - 1]);&#10;            }&#10;        }&#10;    }&#10;    return dp[n][W];&#10;}&#10;&#10;template&lt;class T&gt; T lcs(const vector&lt;T&gt; &amp;a, const vector&lt;T&gt; &amp;b) {&#10;    int n = csz(a), m = csz(b);&#10;    vector&lt;vector&lt;T&gt;&gt; dp(n + 1, vector&lt;T&gt;(m + 1));&#10;    for (int i = 1; i &lt;= n; ++i) {&#10;        for (int j = 1; j &lt;= m; ++j) {&#10;            if (a[i - 1] == b[j - 1]) {&#10;                dp[i][j] = dp[i - 1][j - 1] + 1;&#10;            } else {&#10;                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);&#10;            }&#10;        }&#10;    }&#10;    return dp[n][m];&#10;}&#10;&#10;template&lt;class T&gt; T lis(const vector&lt;T&gt; &amp;a) {&#10;    int n = csz(a);&#10;    vector&lt;T&gt; dp;&#10;    for (const auto &amp;x : a) {&#10;        auto it = lower_bound(all(dp), x);&#10;        if (it == dp.end()) {&#10;            dp.pb(x);&#10;        } else {&#10;            *it = x;&#10;        }&#10;    }&#10;    return csz(dp);&#10;}&#10;&#10; // binary search lower bound upper bound for binary search on the answer&#10;template&lt;class T&gt; T lower_bound(const vector&lt;T&gt; &amp;a, T x) {&#10;    int l = -1, r = csz(a);&#10;    while (r - l &gt; 1) {&#10;        int m = (l + r) / 2;&#10;        if (a[m] &gt;= x) {&#10;            r = m;&#10;        } else {&#10;            l = m;&#10;        }&#10;    }&#10;    return r;&#10;}&#10;&#10;template&lt;class T&gt; T upper_bound(const vector&lt;T&gt; &amp;a, T x) {&#10;    int l = -1, r = csz(a);&#10;    while (r - l &gt; 1) {&#10;        int m = (l + r) / 2;&#10;        if (a[m] &gt; x) {&#10;            r = m;&#10;        } else {&#10;            l = m;&#10;        }&#10;    }&#10;    return r;&#10;}&#10;&#10;const int INFI = 1e9 + 5;&#10;const ll INFL = 1e18 + 5;&#10;const ld EPS = 1e-9;&#10;const ll MOD = 1e9 + 7;&#10;const ld PI = 3.14159265358979323846;&#10;mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());&#10;auto dist = uniform_int_distribution&lt;int&gt;(0, INFI);&#10;auto distll = uniform_int_distribution&lt;ll&gt;(0, INFL);&#10;int rnd() { return dist(rng); }&#10;ll rndl() { return distll(rng); }&#10;&#10;void solve() {&#10;    &#10;}&#10;&#10;int main() {&#10;    GOGOGO&#10;    int t;&#10;    cin &gt;&gt; t;&#10;    while (t--) {&#10;        solve();&#10;    }&#10;    BYEBYE&#10;}" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=02DF8C1C0A239A4A9FB2F1DC99472D1B/Description/@EntryValue" value="cppmain" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=02DF8C1C0A239A4A9FB2F1DC99472D1B/Shortcut/@EntryValue" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=6AD325348A9730438665EEAD06E80B3F/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=6AD325348A9730438665EEAD06E80B3F/Reformat/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=6AD325348A9730438665EEAD06E80B3F/ShortenQualifiedReferences/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=6AD325348A9730438665EEAD06E80B3F/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=6AD325348A9730438665EEAD06E80B3F/Applicability/=Live/@EntryIndexRemoved" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=6AD325348A9730438665EEAD06E80B3F/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=6AD325348A9730438665EEAD06E80B3F/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=6AD325348A9730438665EEAD06E80B3F/Shortcut/@EntryValue" value="cppmain" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=6AD325348A9730438665EEAD06E80B3F/Scope/=139FF4CE89E7094686FDA7BF5FFBBE92/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=6AD325348A9730438665EEAD06E80B3F/Scope/=139FF4CE89E7094686FDA7BF5FFBBE92/Type/@EntryValue" value="Everywhere" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=6AD325348A9730438665EEAD06E80B3F/Text/@EntryValue" value="//#pragma once&#10;&#10;/******************************Mohammed BENHAMMOUTE******************************/&#10;&#10;/*** begin includes ***/&#10;#include &lt;bits/stdc++.h&gt;&#10;&#10;using namespace std;&#10;&#10;typedef long long int ll;&#10;typedef pair&lt;int, int&gt; pi;&#10;typedef pair&lt;ll, ll&gt; pl;&#10;typedef vector&lt;int&gt; vi;&#10;typedef vector&lt;ll&gt; vl;&#10;typedef vector&lt;vi&gt; vvi;&#10;typedef vector&lt;vl&gt; vvl;&#10;typedef vector&lt;pi&gt; vpi;&#10;typedef vector&lt;pl&gt; vpl;&#10;typedef vector&lt;vpi&gt; vvpi;&#10;typedef vector&lt;vpl&gt; vvpl;&#10;typedef set&lt;int&gt; si;&#10;typedef multiset&lt;int&gt; msi;&#10;typedef set&lt;ll&gt; sl;&#10;typedef multiset&lt;ll&gt; msl;&#10;typedef long double ld;&#10;template&lt;class T&gt; using func = function&lt;T&gt;;&#10;&#10;/*** begin #defines ***/&#10;#define clrcin cin.ignore(numeric_limits&lt;streamsize&gt;::max(),'\n');&#10;#define GOGOGO ios::sync_with_stdio(false); cin.tie(nullptr);&#10;#define BYEBYE return 0;&#10;&#10;#define all(cn) (cn).begin(), (cn).end()&#10;#define rep(i, n) for (int i = 0; i &lt; n; ++i)&#10;#define csz(c) ((int)c.size())&#10;#define mp make_pair&#10;#define pb push_back&#10;#define eb emplace_back&#10;#define fi first&#10;#define se second&#10;&#10;#define popcnt __builtin_popcount&#10;#define popcntll __builtin_popcount_ll&#10;&#10;#define what(x) cout &lt;&lt; #x &lt;&lt; &quot; = &quot; &lt;&lt; x &lt;&lt; '\n'&#10;#define cinarr(v) for (auto &amp;x : v) cin &gt;&gt; x&#10;#define coutarr(v) for (const auto &amp;x : v) cout &lt;&lt; x &lt;&lt; ' '; cout &lt;&lt; '\n'&#10;#define coutarrp(v) for (const auto &amp;x : v) cout &lt;&lt; '(' &lt;&lt; x.fi &lt;&lt; ',' &lt;&lt; x.se &lt;&lt; ')'; cout &lt;&lt; '\n'&#10;#define coutarrP(v) for (const auto &amp;x : v) cout &lt;&lt; '(' &lt;&lt; x.fi &lt;&lt; ',' &lt;&lt; x.se &lt;&lt; ')'; cout &lt;&lt; '\n'&#10;#define coutarrnl(v) for (const auto &amp;x : v) cout &lt;&lt; x &lt;&lt; '\n'&#10;/*** end #defines ***/&#10;&#10; // utililty functions&#10;template&lt;class T&gt; T gcd(T a, T b) { return b == 0 ? a : gcd(b, a % b); }&#10;template&lt;class T&gt; T lcm(T a, T b) { return a / gcd(a, b) * b; }&#10;template&lt;class T&gt; T mod(T a, T b) { return (a % b + b) % b; }&#10;// modmul is used to avoid overflow in multiplication&#10;template&lt;class T&gt; T modmul(T a, T b, T m) {&#10;    T r = a * b - m * ll(ld(a) * ld(b) / ld(m));&#10;    return r + m * (r &lt; 0) - m * (r &gt;= m);&#10;}&#10;template&lt;class T&gt; T modinv(T a, T m) {&#10;    T m0 = m, t, q;&#10;    T x0 = 0, x1 = 1;&#10;    if (m == 1) return 0;&#10;    while (a &gt; 1) {&#10;        q = a / m;&#10;        t = m, m = a % m, a = t;&#10;        t = x0, x0 = x1 - q * x0, x1 = t;&#10;    }&#10;    return mod(x1, m0);&#10;}&#10;&#10;// graph functions&#10;template&lt;class T&gt; void dfs(const vector&lt;vector&lt;T&gt;&gt; &amp;g, vector&lt;bool&gt; &amp;vis, int u) {&#10;    vis[u] = true;&#10;    for (const auto &amp;v : g[u]) {&#10;        if (!vis[v]) {&#10;            dfs(g, vis, v);&#10;        }&#10;    }&#10;}&#10;&#10;template&lt;class T&gt; void bfs(const vector&lt;vector&lt;T&gt;&gt; &amp;g, vector&lt;bool&gt; &amp;vis, int u) {&#10;    queue&lt;int&gt; q;&#10;    q.push(u);&#10;    vis[u] = true;&#10;    while (!q.empty()) {&#10;        u = q.front(); q.pop();&#10;        for (const auto &amp;v : g[u]) {&#10;            if (!vis[v]) {&#10;                vis[v] = true;&#10;                q.push(v);&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// binary couloring function&#10;bool is_bipartite(const vector&lt;vector&lt;int&gt;&gt; &amp;g, vector&lt;int&gt; &amp;color, int u, int c) {&#10;    color[u] = c;&#10;    for (const auto &amp;v : g[u]) {&#10;        if (color[v] == c) return false;&#10;        if (color[v] == -1 &amp;&amp; !is_bipartite(g, color, v, 1 - c)) return false;&#10;    }&#10;    return true;&#10;}&#10;&#10;// prime sieve&#10;vector&lt;int&gt; sieve(int n) {&#10;    vector&lt;int&gt; primes;&#10;    vector&lt;bool&gt; is_prime(n + 1, true);&#10;    is_prime[0] = is_prime[1] = false;&#10;    for (int i = 2; i &lt;= n; ++i) {&#10;        if (is_prime[i]) {&#10;            primes.push_back(i);&#10;            for (int j = i * 2; j &lt;= n; j += i) {&#10;                is_prime[j] = false;&#10;            }&#10;        }&#10;    }&#10;    return primes;&#10;}&#10;&#10;// prime factorization&#10;vector&lt;pair&lt;int, int&gt;&gt; prime_factorization(int n) {&#10;    vector&lt;pair&lt;int, int&gt;&gt; factors;&#10;    for (int i = 2; i * i &lt;= n; ++i) {&#10;        if (n % i == 0) {&#10;            int cnt = 0;&#10;            while (n % i == 0) {&#10;                n /= i;&#10;                ++cnt;&#10;            }&#10;            factors.emplace_back(i, cnt);&#10;        }&#10;    }&#10;    if (n &gt; 1) {&#10;        factors.emplace_back(n, 1);&#10;    }&#10;    return factors;&#10;}&#10;&#10;// fast exponentiation&#10;ll fastpow(ll a, ll b, ll m) {&#10;    ll res = 1;&#10;    while (b &gt; 0) {&#10;        if (b &amp; 1) {&#10;            res = res * a % m;&#10;        }&#10;        a = a * a % m;&#10;        b &gt;&gt;= 1;&#10;    }&#10;    return res;&#10;}&#10;&#10;// dp functions&#10;template&lt;class T&gt; T knapsack(const vector&lt;T&gt; &amp;w, const vector&lt;T&gt; &amp;v, T W) {&#10;    int n = csz(w);&#10;    vector&lt;vector&lt;T&gt;&gt; dp(n + 1, vector&lt;T&gt;(W + 1));&#10;    for (int i = 1; i &lt;= n; ++i) {&#10;        for (int j = 0; j &lt;= W; ++j) {&#10;            dp[i][j] = dp[i - 1][j];&#10;            if (j &gt;= w[i - 1]) {&#10;                dp[i][j] = max(dp[i][j], dp[i - 1][j - w[i - 1]] + v[i - 1]);&#10;            }&#10;        }&#10;    }&#10;    return dp[n][W];&#10;}&#10;&#10;template&lt;class T&gt; T lcs(const vector&lt;T&gt; &amp;a, const vector&lt;T&gt; &amp;b) {&#10;    int n = csz(a), m = csz(b);&#10;    vector&lt;vector&lt;T&gt;&gt; dp(n + 1, vector&lt;T&gt;(m + 1));&#10;    for (int i = 1; i &lt;= n; ++i) {&#10;        for (int j = 1; j &lt;= m; ++j) {&#10;            if (a[i - 1] == b[j - 1]) {&#10;                dp[i][j] = dp[i - 1][j - 1] + 1;&#10;            } else {&#10;                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);&#10;            }&#10;        }&#10;    }&#10;    return dp[n][m];&#10;}&#10;&#10;template&lt;class T&gt; T lis(const vector&lt;T&gt; &amp;a) {&#10;    int n = csz(a);&#10;    vector&lt;T&gt; dp;&#10;    for (const auto &amp;x : a) {&#10;        auto it = lower_bound(all(dp), x);&#10;        if (it == dp.end()) {&#10;            dp.pb(x);&#10;        } else {&#10;            *it = x;&#10;        }&#10;    }&#10;    return csz(dp);&#10;}&#10;&#10; // binary search lower bound upper bound for binary search on the answer&#10;template&lt;class T&gt; T lower_bound(const vector&lt;T&gt; &amp;a, T x) {&#10;    int l = -1, r = csz(a);&#10;    while (r - l &gt; 1) {&#10;        int m = (l + r) / 2;&#10;        if (a[m] &gt;= x) {&#10;            r = m;&#10;        } else {&#10;            l = m;&#10;        }&#10;    }&#10;    return r;&#10;}&#10;&#10;template&lt;class T&gt; T upper_bound(const vector&lt;T&gt; &amp;a, T x) {&#10;    int l = -1, r = csz(a);&#10;    while (r - l &gt; 1) {&#10;        int m = (l + r) / 2;&#10;        if (a[m] &gt; x) {&#10;            r = m;&#10;        } else {&#10;            l = m;&#10;        }&#10;    }&#10;    return r;&#10;}&#10;&#10;const int INFI = 1e9 + 5;&#10;const ll INFL = 1e18 + 5;&#10;const ld EPS = 1e-9;&#10;const ll MOD = 1e9 + 7;&#10;const ld PI = 3.14159265358979323846;&#10;mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());&#10;auto dist = uniform_int_distribution&lt;int&gt;(0, INFI);&#10;auto distll = uniform_int_distribution&lt;ll&gt;(0, INFL);&#10;int rnd() { return dist(rng); }&#10;ll rndl() { return distll(rng); }&#10;&#10;void solve() {&#10;    &#10;}&#10;&#10;int main() {&#10;    GOGOGO&#10;    int t;&#10;    cin &gt;&gt; t;&#10;    while (t--) {&#10;        solve();&#10;    }&#10;    BYEBYE&#10;}" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=6AD325348A9730438665EEAD06E80B3F/IsBlessed/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=6AD325348A9730438665EEAD06E80B3F/Description/@EntryValue" value="template" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=7901B6ECEF11CD4C8B26529CEC0E3FFB/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=7901B6ECEF11CD4C8B26529CEC0E3FFB/Reformat/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=7901B6ECEF11CD4C8B26529CEC0E3FFB/ShortenQualifiedReferences/@EntryValue" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=7901B6ECEF11CD4C8B26529CEC0E3FFB/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=7901B6ECEF11CD4C8B26529CEC0E3FFB/Applicability/=Live/@EntryIndexRemoved" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=7901B6ECEF11CD4C8B26529CEC0E3FFB/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=7901B6ECEF11CD4C8B26529CEC0E3FFB/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=7901B6ECEF11CD4C8B26529CEC0E3FFB/Description/@EntryValue" value="cppmain" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=7901B6ECEF11CD4C8B26529CEC0E3FFB/Shortcut/@EntryValue" value="cppmain" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=7901B6ECEF11CD4C8B26529CEC0E3FFB/Text/@EntryValue" value="hello there" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=41884E6D6DD81F4AAA8790B4740D5657/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=41884E6D6DD81F4AAA8790B4740D5657/Reformat/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=41884E6D6DD81F4AAA8790B4740D5657/ShortenQualifiedReferences/@EntryValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=41884E6D6DD81F4AAA8790B4740D5657/Applicability/=Live/@EntryIndexedValue" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=41884E6D6DD81F4AAA8790B4740D5657/Applicability/=Live/@EntryIndexRemoved" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=41884E6D6DD81F4AAA8790B4740D5657/Scope/=F6696F8185506F41B9C4252540BE9C18/@KeyIndexDefined" value="true" type="bool" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=41884E6D6DD81F4AAA8790B4740D5657/Scope/=F6696F8185506F41B9C4252540BE9C18/Type/@EntryValue" value="InCppFile" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=41884E6D6DD81F4AAA8790B4740D5657/Description/@EntryValue" value="cpp" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=41884E6D6DD81F4AAA8790B4740D5657/Shortcut/@EntryValue" value="cpp" type="string" />
    <option name="/Default/PatternsAndTemplates/LiveTemplates/Template/=41884E6D6DD81F4AAA8790B4740D5657/Text/@EntryValue" value="//#pragma once&#10;&#10;/******************************Mohammed BENHAMMOUTE******************************/&#10;&#10;/*** begin includes ***/&#10;#include &lt;bits/stdc++.h&gt;&#10;&#10;using namespace std;&#10;&#10;typedef long long int ll;&#10;typedef pair&lt;int, int&gt; pi;&#10;typedef pair&lt;ll, ll&gt; pl;&#10;typedef vector&lt;int&gt; vi;&#10;typedef vector&lt;ll&gt; vl;&#10;typedef vector&lt;vi&gt; vvi;&#10;typedef vector&lt;vl&gt; vvl;&#10;typedef vector&lt;pi&gt; vpi;&#10;typedef vector&lt;pl&gt; vpl;&#10;typedef vector&lt;vpi&gt; vvpi;&#10;typedef vector&lt;vpl&gt; vvpl;&#10;typedef set&lt;int&gt; si;&#10;typedef multiset&lt;int&gt; msi;&#10;typedef set&lt;ll&gt; sl;&#10;typedef multiset&lt;ll&gt; msl;&#10;typedef long double ld;&#10;template&lt;class T&gt; using func = function&lt;T&gt;;&#10;&#10;/*** begin #defines ***/&#10;#define clrcin cin.ignore(numeric_limits&lt;streamsize&gt;::max(),'\n');&#10;#define GOGOGO ios::sync_with_stdio(false); cin.tie(nullptr);&#10;#define BYEBYE return 0;&#10;&#10;#define all(cn) (cn).begin(), (cn).end()&#10;#define rep(i, n) for (int i = 0; i &lt; n; ++i)&#10;#define csz(c) ((int)c.size())&#10;#define mp make_pair&#10;#define pb push_back&#10;#define eb emplace_back&#10;#define fi first&#10;#define se second&#10;&#10;#define popcnt __builtin_popcount&#10;#define popcntll __builtin_popcount_ll&#10;&#10;#define what(x) cout &lt;&lt; #x &lt;&lt; &quot; = &quot; &lt;&lt; x &lt;&lt; '\n'&#10;#define cinarr(v) for (auto &amp;x : v) cin &gt;&gt; x&#10;#define coutarr(v) for (const auto &amp;x : v) cout &lt;&lt; x &lt;&lt; ' '; cout &lt;&lt; '\n'&#10;#define coutarrp(v) for (const auto &amp;x : v) cout &lt;&lt; '(' &lt;&lt; x.fi &lt;&lt; ',' &lt;&lt; x.se &lt;&lt; ')'; cout &lt;&lt; '\n'&#10;#define coutarrP(v) for (const auto &amp;x : v) cout &lt;&lt; '(' &lt;&lt; x.fi &lt;&lt; ',' &lt;&lt; x.se &lt;&lt; ')'; cout &lt;&lt; '\n'&#10;#define coutarrnl(v) for (const auto &amp;x : v) cout &lt;&lt; x &lt;&lt; '\n'&#10;/*** end #defines ***/&#10;&#10; // utililty functions&#10;template&lt;class T&gt; T gcd(T a, T b) { return b == 0 ? a : gcd(b, a % b); }&#10;template&lt;class T&gt; T lcm(T a, T b) { return a / gcd(a, b) * b; }&#10;template&lt;class T&gt; T mod(T a, T b) { return (a % b + b) % b; }&#10;// modmul is used to avoid overflow in multiplication&#10;template&lt;class T&gt; T modmul(T a, T b, T m) {&#10;    T r = a * b - m * ll(ld(a) * ld(b) / ld(m));&#10;    return r + m * (r &lt; 0) - m * (r &gt;= m);&#10;}&#10;template&lt;class T&gt; T modinv(T a, T m) {&#10;    T m0 = m, t, q;&#10;    T x0 = 0, x1 = 1;&#10;    if (m == 1) return 0;&#10;    while (a &gt; 1) {&#10;        q = a / m;&#10;        t = m, m = a % m, a = t;&#10;        t = x0, x0 = x1 - q * x0, x1 = t;&#10;    }&#10;    return mod(x1, m0);&#10;}&#10;&#10;// graph functions&#10;template&lt;class T&gt; void dfs(const vector&lt;vector&lt;T&gt;&gt; &amp;g, vector&lt;bool&gt; &amp;vis, int u) {&#10;    vis[u] = true;&#10;    for (const auto &amp;v : g[u]) {&#10;        if (!vis[v]) {&#10;            dfs(g, vis, v);&#10;        }&#10;    }&#10;}&#10;&#10;template&lt;class T&gt; void bfs(const vector&lt;vector&lt;T&gt;&gt; &amp;g, vector&lt;bool&gt; &amp;vis, int u) {&#10;    queue&lt;int&gt; q;&#10;    q.push(u);&#10;    vis[u] = true;&#10;    while (!q.empty()) {&#10;        u = q.front(); q.pop();&#10;        for (const auto &amp;v : g[u]) {&#10;            if (!vis[v]) {&#10;                vis[v] = true;&#10;                q.push(v);&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// binary couloring function&#10;bool is_bipartite(const vector&lt;vector&lt;int&gt;&gt; &amp;g, vector&lt;int&gt; &amp;color, int u, int c) {&#10;    color[u] = c;&#10;    for (const auto &amp;v : g[u]) {&#10;        if (color[v] == c) return false;&#10;        if (color[v] == -1 &amp;&amp; !is_bipartite(g, color, v, 1 - c)) return false;&#10;    }&#10;    return true;&#10;}&#10;&#10;// prime sieve&#10;vector&lt;int&gt; sieve(int n) {&#10;    vector&lt;int&gt; primes;&#10;    vector&lt;bool&gt; is_prime(n + 1, true);&#10;    is_prime[0] = is_prime[1] = false;&#10;    for (int i = 2; i &lt;= n; ++i) {&#10;        if (is_prime[i]) {&#10;            primes.push_back(i);&#10;            for (int j = i * 2; j &lt;= n; j += i) {&#10;                is_prime[j] = false;&#10;            }&#10;        }&#10;    }&#10;    return primes;&#10;}&#10;&#10;// prime factorization&#10;vector&lt;pair&lt;int, int&gt;&gt; prime_factorization(int n) {&#10;    vector&lt;pair&lt;int, int&gt;&gt; factors;&#10;    for (int i = 2; i * i &lt;= n; ++i) {&#10;        if (n % i == 0) {&#10;            int cnt = 0;&#10;            while (n % i == 0) {&#10;                n /= i;&#10;                ++cnt;&#10;            }&#10;            factors.emplace_back(i, cnt);&#10;        }&#10;    }&#10;    if (n &gt; 1) {&#10;        factors.emplace_back(n, 1);&#10;    }&#10;    return factors;&#10;}&#10;&#10;// fast exponentiation&#10;ll fastpow(ll a, ll b, ll m) {&#10;    ll res = 1;&#10;    while (b &gt; 0) {&#10;        if (b &amp; 1) {&#10;            res = res * a % m;&#10;        }&#10;        a = a * a % m;&#10;        b &gt;&gt;= 1;&#10;    }&#10;    return res;&#10;}&#10;&#10;// dp functions&#10;template&lt;class T&gt; T knapsack(const vector&lt;T&gt; &amp;w, const vector&lt;T&gt; &amp;v, T W) {&#10;    int n = csz(w);&#10;    vector&lt;vector&lt;T&gt;&gt; dp(n + 1, vector&lt;T&gt;(W + 1));&#10;    for (int i = 1; i &lt;= n; ++i) {&#10;        for (int j = 0; j &lt;= W; ++j) {&#10;            dp[i][j] = dp[i - 1][j];&#10;            if (j &gt;= w[i - 1]) {&#10;                dp[i][j] = max(dp[i][j], dp[i - 1][j - w[i - 1]] + v[i - 1]);&#10;            }&#10;        }&#10;    }&#10;    return dp[n][W];&#10;}&#10;&#10;template&lt;class T&gt; T lcs(const vector&lt;T&gt; &amp;a, const vector&lt;T&gt; &amp;b) {&#10;    int n = csz(a), m = csz(b);&#10;    vector&lt;vector&lt;T&gt;&gt; dp(n + 1, vector&lt;T&gt;(m + 1));&#10;    for (int i = 1; i &lt;= n; ++i) {&#10;        for (int j = 1; j &lt;= m; ++j) {&#10;            if (a[i - 1] == b[j - 1]) {&#10;                dp[i][j] = dp[i - 1][j - 1] + 1;&#10;            } else {&#10;                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);&#10;            }&#10;        }&#10;    }&#10;    return dp[n][m];&#10;}&#10;&#10;template&lt;class T&gt; T lis(const vector&lt;T&gt; &amp;a) {&#10;    int n = csz(a);&#10;    vector&lt;T&gt; dp;&#10;    for (const auto &amp;x : a) {&#10;        auto it = lower_bound(all(dp), x);&#10;        if (it == dp.end()) {&#10;            dp.pb(x);&#10;        } else {&#10;            *it = x;&#10;        }&#10;    }&#10;    return csz(dp);&#10;}&#10;&#10; // binary search lower bound upper bound for binary search on the answer&#10;template&lt;class T&gt; T lower_bound(const vector&lt;T&gt; &amp;a, T x) {&#10;    int l = -1, r = csz(a);&#10;    while (r - l &gt; 1) {&#10;        int m = (l + r) / 2;&#10;        if (a[m] &gt;= x) {&#10;            r = m;&#10;        } else {&#10;            l = m;&#10;        }&#10;    }&#10;    return r;&#10;}&#10;&#10;template&lt;class T&gt; T upper_bound(const vector&lt;T&gt; &amp;a, T x) {&#10;    int l = -1, r = csz(a);&#10;    while (r - l &gt; 1) {&#10;        int m = (l + r) / 2;&#10;        if (a[m] &gt; x) {&#10;            r = m;&#10;        } else {&#10;            l = m;&#10;        }&#10;    }&#10;    return r;&#10;}&#10;&#10;const int INFI = 1e9 + 5;&#10;const ll INFL = 1e18 + 5;&#10;const ld EPS = 1e-9;&#10;const ll MOD = 1e9 + 7;&#10;const ld PI = 3.14159265358979323846;&#10;mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());&#10;auto dist = uniform_int_distribution&lt;int&gt;(0, INFI);&#10;auto distll = uniform_int_distribution&lt;ll&gt;(0, INFL);&#10;int rnd() { return dist(rng); }&#10;ll rndl() { return distll(rng); }&#10;&#10;void solve() {&#10;    &#10;}&#10;&#10;int main() {&#10;    GOGOGO&#10;    int t;&#10;    cin &gt;&gt; t;&#10;    while (t--) {&#10;        solve();&#10;    }&#10;    BYEBYE&#10;}" type="string" />
  </component>
</project>